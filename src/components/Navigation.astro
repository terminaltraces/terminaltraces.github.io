---
import NavigationLink from './NavigationLink.astro';

export interface Props {
  class?: string;
}

const { class: className = "" } = Astro.props;

const navItems = [
  { href: '/', label: 'Home' },
  { href: '/about', label: 'About' },
  { href: '/work', label: 'Work' },
  { href: '/projects', label: 'Projects' },
  { href: '/blog', label: 'Blog' },
  { href: '/contact', label: 'Contact' }
];
---

<nav class={`sticky top-0 z-40 backdrop-blur-cosmic border-b border-cosmic-200 dark:border-cosmic-700 ${className}`}>
  <div class="container mx-auto px-6 py-4">
    <div class="flex items-center justify-between">
      <!-- Logo/Brand -->
      <a
        href="/"
        class="text-xl font-bold text-gradient-cosmic hover:scale-105 transition-transform duration-200 focus-cosmic rounded-lg"
        aria-label="Drew's Blog - Home"
      >
        âœ¨ Drew
      </a>

      <!-- Desktop Navigation -->
      <div class="hidden md:flex items-center space-x-1">
        {navItems.map(item => (
          <NavigationLink href={item.href}>
            {item.label}
          </NavigationLink>
        ))}
      </div>

      <!-- Theme Toggle & Mobile Menu Button -->
      <div class="flex items-center space-x-2">
        <!-- Theme Toggle -->
        <button
          id="theme-toggle"
          class="p-2 rounded-lg hover:bg-cosmic-100 dark:hover:bg-cosmic-800 transition-colors duration-200 focus-cosmic"
          aria-label="Toggle theme"
          type="button"
        >
          <svg
            class="w-5 h-5 dark:hidden"
            fill="currentColor"
            viewBox="0 0 20 20"
          >
            <path
              fill-rule="evenodd"
              d="M10 2a1 1 0 011 1v1a1 1 0 11-2 0V3a1 1 0 011-1zm4 8a4 4 0 11-8 0 4 4 0 018 0zm-.464 4.95l.707.707a1 1 0 001.414-1.414l-.707-.707a1 1 0 00-1.414 1.414zm2.12-10.607a1 1 0 010 1.414l-.706.707a1 1 0 11-1.414-1.414l.707-.707a1 1 0 011.414 0zM17 11a1 1 0 100-2h-1a1 1 0 100 2h1zm-7 4a1 1 0 011 1v1a1 1 0 11-2 0v-1a1 1 0 011-1zM5.05 6.464A1 1 0 106.465 5.05l-.708-.707a1 1 0 00-1.414 1.414l.707.707zm1.414 8.486l-.707.707a1 1 0 01-1.414-1.414l.707-.707a1 1 0 011.414 1.414zM4 11a1 1 0 100-2H3a1 1 0 000 2h1z"
              clip-rule="evenodd"
            ></path>
          </svg>
          <svg
            class="w-5 h-5 hidden dark:block"
            fill="currentColor"
            viewBox="0 0 20 20"
          >
            <path d="M17.293 13.293A8 8 0 016.707 2.707a8.001 8.001 0 1010.586 10.586z"></path>
          </svg>
        </button>

        <!-- Mobile Menu Button -->
        <button
          id="mobile-menu-button"
          class="md:hidden p-2 rounded-lg hover:bg-cosmic-100 dark:hover:bg-cosmic-800 transition-colors duration-200 focus-cosmic"
          aria-label="Toggle mobile menu"
          type="button"
        >
          <svg
            class="w-6 h-6"
            fill="none"
            stroke="currentColor"
            viewBox="0 0 24 24"
          >
            <path
              stroke-linecap="round"
              stroke-linejoin="round"
              stroke-width="2"
              d="M4 6h16M4 12h16M4 18h16"
            ></path>
          </svg>
        </button>
      </div>
    </div>

    <!-- Mobile Navigation -->
    <div id="mobile-menu" class="hidden md:hidden mt-4 pb-4">
      <div class="flex flex-col space-y-2">
        {navItems.map(item => (
          <NavigationLink href={item.href}>
            {item.label}
          </NavigationLink>
        ))}
      </div>
    </div>
  </div>
</nav>

<script>
  // Theme toggle functionality
  const themeToggle = document.getElementById("theme-toggle");
  const html = document.documentElement;

  // Check for saved theme preference or default to 'light'
  const savedTheme = localStorage.getItem("theme");
  const systemTheme = window.matchMedia("(prefers-color-scheme: dark)").matches
    ? "dark"
    : "light";
  const theme = savedTheme || systemTheme;

  html.classList.toggle("dark", theme === "dark");

  themeToggle?.addEventListener("click", () => {
    const isDark = html.classList.toggle("dark");
    localStorage.setItem("theme", isDark ? "dark" : "light");
  });

  // Mobile menu functionality
  const mobileMenuButton = document.getElementById("mobile-menu-button");
  const mobileMenu = document.getElementById("mobile-menu");

  mobileMenuButton?.addEventListener("click", () => {
    mobileMenu?.classList.toggle("hidden");
  });

  // Close mobile menu when clicking outside
  document.addEventListener("click", (e) => {
    if (
      !mobileMenuButton?.contains(e.target as Node) &&
      !mobileMenu?.contains(e.target as Node)
    ) {
      mobileMenu?.classList.add("hidden");
    }
  });

  // Active navigation link highlighting
  const currentPath = window.location.pathname;
  const navLinks = document.querySelectorAll(".nav-link");

  navLinks.forEach((link) => {
    const href = link.getAttribute("href");
    if (
      href === currentPath ||
      (currentPath === "/" && href === "/") ||
      (currentPath.startsWith("/blog/") && href === "/blog")
    ) {
      link.classList.add("active");
    }
  });
</script>
